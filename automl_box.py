# -*- coding: utf-8 -*-
"""autoML Box.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10dskKAlGkKOUK7EpcxFm3jnv4BAy4qqN

[auto ML](https://machinelearningmastery.com/automl-libraries-for-python/)
[auto ML](https://https://pypi.org/project/automl/)

[tutorial for 4 auto-ML](https://towardsdatascience.com/4-python-automl-libraries-every-data-scientist-should-know-680ff5d6ad08)

[ML BOX](https://medium.com/datadriveninvestor/automl-in-python-an-overview-of-the-mlbox-package-208118a7fe5)

[MLBOX WEBSITE](https://mlbox.readthedocs.io/en/latest/introduction.html)
"""

pip install wheel

pip install setuptools

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from mlbox.preprocessing.reader import Reader
from mlbox.preprocessing.drift_thresholder import Drift_thresholder
from mlbox.optimisation.optimiser import Optimiser 
from mlbox.prediction.predictor import Predictor
from IPython.core.display import display, HTML
display(HTML('<style>.prompt{width: 0px; min-width: 0px; visibility: collapse}</style>'))
import warnings
warnings.filterwarnings("ignore")

paths = ["/content/drive/MyDrive/train.csv","/content/drive/MyDrive/test.csv"] 
target_name = "class"
rd = Reader(sep=",")
df = rd.train_test_split(paths, target_name)

df["train"].head()

dft = Drift_thresholder().fit_transform(df)

opt = Optimiser()
warnings.filterwarnings('ignore', category=DeprecationWarning)
score = opt.evaluate(None, df)

space = {
        'ne__numerical_strategy':{"search":"choice",
                                 "space":[0, "mean"]},
        'ce__strategy':{"search":"choice",
                        "space":["label_encoding", "random_projection", "entity_embedding"]}, 
        'fs__threshold':{"search":"uniform",
                        "space":[0.001, 0.2]}, 
        'est__strategy':{"search":"choice", 
                         "space":["RandomForest", "ExtraTrees", "LightGBM"]},
        'est__max_depth':{"search":"choice", 
                          "space":[-1, 9, 10, 11, 12, 13]}
        }

params = opt.optimise(space, df, 50)

opt.evaluate(params, df)

prd = Predictor()
prd.fit_predict(params, df)
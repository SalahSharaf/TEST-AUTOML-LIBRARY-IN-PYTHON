# -*- coding: utf-8 -*-
"""h2otest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eFl7aRBbcWi5df5Qimq1Nx3fV3-ciBvB

[h2o website](https://docs.h2o.ai/h2o/latest-stable/h2o-docs/automl.html)
"""

pip install requests

pip install tabulate

pip install "colorama>=0.3.8"

pip install future

pip install h2o

"""# our code"""

import h2o
from h2o.automl import H2OAutoML
h2o.init()

from google.colab import drive
drive.mount('/content/drive')

# Import a sample binary outcome train/test set into H2O
prostate = h2o.import_file("/content/drive/MyDrive/breast-cancer-wisconsin.data.txt")
prostate.head()

# split into train and testing sets
train, test = prostate.split_frame(ratios = [0.8], seed = 1234)
x = train.columns
y = "class"
x.remove(y)
# For binary classification, response should be a factor
train[y] = train[y].asfactor()
test[y] = test[y].asfactor()

# Run AutoML for 20 base models (limited to 1 hour max runtime by default)
aml = H2OAutoML(max_models=10, seed=1)
aml.train(x=x, y=y, training_frame=train)

# View the AutoML Leaderboard
lb = aml.leaderboard
lb.head(rows=lb.nrows)

#aml.leader
# Get leaderboard with `extra_columns` = 'ALL'
lb = h2o.automl.get_leaderboard(aml, extra_columns = 'ALL')

preds = aml.predict(test)
preds.head()

# Set the predictor names and the response column name
response = prostate.columns[-1]
predictors = prostate.names[0:8]
# Convert the response column to a factor
prostate['class'] = prostate['class'].asfactor()

from h2o.estimators.gbm import H2OGradientBoostingEstimator
# Train a GBM model setting nfolds to 5
prostate_gbm = H2OGradientBoostingEstimator(nfolds = 5, seed = 1)
prostate_gbm.train(x=predictors, y=response, training_frame=prostate)

# AUC of cross-validated holdout predictions
prostate_gbm.auc(xval=True)
prostate_gbm.accuracy(xval=True)